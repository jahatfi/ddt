# Adapted from: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Lint and Test on Ubuntu
run-name: ${{ github.actor }} is testing out DDT on Ubuntu (latest)
on:  #[push]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  test-ubuntu:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          # set PATH=%PATH%;C:/Users/runneradmin/.local/bin/poetry
          poetry --version
          poetry install --no-interaction --no-root
          apt install cloc

      - name: Install library
        run: poetry install --no-interaction
      - run: |
          source $VENV
          pytest --version


      - name: Lint with pylint
        id: pylint
        continue-on-error: true
        run: |
          set +e
          # stop the build if there are Python syntax errors or undefined names
          poetry run pylint src/unit_test_generator.py
          DATA=$?
          if [ $DATA -ne 0 ]; then
            echo "::notice::Pylint recommends changes." && exit $DATA
          fi
          echo "DATA=$DATA" >> "$GITHUB_OUTPUT"
          echo "##[set-output name=data;]$($DATA)"
          COLOR#$(chmod +x color_picker.sh && ./color_picker.sh 0 100 $DATA)"
          echo "COLOR=green" >> "$GITHUB_OUTPUT"

      - name: pylint badge
        uses: RubbaBoy/BYOB@v1
        with:
          NAME: pylint
          LABEL: 'pylint'
          STATUS: ${{ steps.pylint.outputs.data }}
          COLOR: ${{ steps.pylint.outputs.color }}
          GITHUB_TOKEN: ${{ secrets.DDT }}

      - name: Typecheck with mypy
        id: mypy
        continue-on-error: true
        run: |
          set +e
          chmod +x get_mypy_pct_errors.sh
          ./get_mypy_pct_errors.sh src/unit_test_generator.py
          cd src
          poetry run mypy --version
          poetry run mypy unit_test_generator.py


          DATA=$?
          echo "COLOR=green" >> "$GITHUB_OUTPUT"
          echo "DATA=$DATA" >> "$GITHUB_OUTPUT"
          echo "DATA=$DATA"

          if [ $DATA -ne 0 ]; then
            echo "::notice::mypy found errors." && exit $DATA
          fi

      - name: mypybadge
        uses: RubbaBoy/BYOB@v1
        env:
          COLOR: ${{ steps.mypy.outputs.COLOR }}
          DATA: ${{ steps.mypy.outputs.DATA }}
        with:
          NAME: mypy
          LABEL: '# of mypy errors'
          STATUS: ${{ steps.mypy.outputs.DATA }}   # echo "$DATA" # ${{ steps.mypy.outputs.data }}
          COLOR: ${{ steps.mypy.outputs.COLOR }} #echo "$COLOR" #${{ steps.mypy.outputs.color }}
          GITHUB_TOKEN: ${{ secrets.DDT }}
          REPOSITORY: ${{ github.actor }}/ddt
          ACTOR: ${{ github.actor }}

      - name: pytest procedural_division
        # continue-on-error: true
        run: |
          cd tests/procedural_division
          poetry run python divide_ints.py
          #poetry run pytest -s -v . #--doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: pytest fizzbuzz
        # continue-on-error: true
        run: |
          cd tests/fizzbuzz
          poetry run python fizzbuzz.py
          poetry run pytest -s -v . #--doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: pytest all_types
        # continue-on-error: true
        run: |
          cd tests/all_types
          poetry run python all_types.py
          #poetry run pytest -s -v . #--doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: pytest oo_car
        # continue-on-error: true
        run: |
          cd tests/oo_car
          poetry run python car.py
          poetry run coverage run -m pytest -s -v .  #--doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: pytest pass_by_assignment
        # continue-on-error: true
        run: |
          cd tests/pass_by_assignment
          poetry run python pass_by_assignment.py
          #poetry run pytest -s -v .  #--doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html


      - name: pytest helper functions 
        # continue-on-error: true
        run: |
          cd src
          poetry run coverage run -m pytest --log-level=DEBUG -s -v .

      - name: pytest coverage badge
        run: |
          ls -lah
          ls -lah tests/fizzbuzz
          ls -lah tests/oo_car
          ls -lah tests/all_types
          ls -lah tests/procedural_division
          ls -lah tests/pass_by_assignment
          poetry add coverage-badge 
          poetry run pip install genbadge[all]
          poetry run coverage combine tests/fizzbuzz/.coverage tests/oo_car/.coverage tests/all_types/.coverage tests/pass_by_assignment/.coverage tests/procedural_division/.coverage src/.coverage
          ls -lah
          #poetry run coverage run -m pytest .
          poetry run coverage report -m --omit="*/test_*"
          poetry run coverage xml --omit="*/test_*"
          poetry run coverage html
          ls -lah
          echo "HTML?"
          ls -lah htmlcov
          poetry run coverage-badge -o coverage.svg
          poetry run genbadge coverage -i coverage.xml