{
   "name": "meta_program_function_call",
   "parameter_names": [
      "this_state",
      "tab",
      "package",
      "function_metadata"
   ],
   "lines": [
      1547,
      1557,
      1558,
      1559,
      1560,
      1561,
      1562,
      1563,
      1562,
      1564,
      1565,
      1566,
      1568,
      1571,
      1573,
      1574,
      1578,
      1579,
      1581,
      1582,
      1583,
      1585,
      1586,
      1587,
      1588,
      1589,
      1590,
      1593,
      1596,
      1597,
      1598,
      1599,
      1600,
      1603,
      1605,
      1606,
      1607,
      1608,
      1609,
      1610,
      1611,
      1612,
      1613,
      1615,
      1619,
      1620,
      1622,
      1623,
      1624,
      1625,
      1627,
      1628,
      1629,
      1630,
      1631,
      1632,
      1633,
      1634,
      1635,
      1637,
      1638,
      1639,
      1640,
      1641,
      1642,
      1643,
      1644,
      1647,
      1648,
      1649,
      1656,
      1657,
      1659,
      1660,
      1661
   ],
   "non_code_lines": [
      1548,
      1549,
      1550,
      1551,
      1552,
      1553,
      1554,
      1555,
      1556,
      1567,
      1569,
      1570,
      1572,
      1575,
      1576,
      1577,
      1580,
      1584,
      1591,
      1592,
      1594,
      1595,
      1601,
      1602,
      1604,
      1614,
      1616,
      1617,
      1618,
      1621,
      1626,
      1636,
      1645,
      1646,
      1650,
      1651,
      1652,
      1653,
      1654,
      1655,
      1658
   ],
   "is_method": false,
   "global_vars_read_from": [
      "logger"
   ],
   "global_vars_written_to": [],
   "source_file": null,
   "coverage_io": {
      "c76ea35f1232cf144a015278270c2517e4376249f9ca3290b8dcbdd8a261546b": {
         "args": [
            "CoverageInfo(args=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], kwargs={}, globals_before={}, globals_after={}, expected_result='CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1394, 1397, 1401, 1410, 1411, 1414], exception_type='', exception_message='', constructor='', cost=0.001)",
            "\"  \"",
            "\"unit_test_generator\"",
            "FunctionMetaData(name='update_global', lines=[1386, 1394, 1395, 1396, 1397, 1398, 1399, 1401, 1410, 1411, 1412, 1413, 1414], parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'827ce9f30381c4cf8356fd85510849bde9e1eb403ab9893a609b1ffccaaf39eb': CoverageInfo(args=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], kwargs={}, globals_before={}, globals_after={}, expected_result='CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1394, 1397, 1401, 1410, 1411, 1414], exception_type='', exception_message='', constructor='', cost=0.001)}, coverage_percentage=46.15, types_in_use={'src.unit_test_generator.CoverageInfo', 'logging.Logger'}, unified_test_coverage={1410, 1411, 1414, 1394, 1397, 1401}, needs_pytest=False)"
         ],
         "kwargs": {},
         "globals_before": {},
         "globals_after": {},
         "expected_result": "['    result = unit_test_generator.update_global(obj,this_global,phase,this_coverage_info)\\n', '    assert isinstance(result, expected_type)\\n', '    assert result == expected_result or result == eval(expected_result)\\n']",
         "expected_type": "list",
         "coverage": [
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            236,
            237,
            238,
            241,
            242,
            245,
            246,
            247,
            257,
            258,
            259,
            260,
            288,
            289,
            290,
            293,
            294,
            415,
            416,
            431,
            436,
            437,
            442,
            443,
            444,
            446,
            447,
            448,
            450,
            451,
            452,
            456,
            460,
            466,
            467,
            471,
            473,
            474,
            475,
            483,
            491,
            499,
            511,
            512,
            676,
            677,
            691,
            697,
            700,
            701,
            702,
            713,
            715,
            718,
            720,
            740,
            741,
            745,
            759,
            810,
            812,
            815,
            816,
            818,
            820,
            829,
            835,
            837,
            840,
            841,
            842,
            843,
            844,
            846,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            889,
            890,
            892,
            893,
            894,
            895,
            896,
            898,
            900,
            906,
            907,
            908,
            910,
            911,
            916,
            917,
            918,
            920,
            929,
            930,
            932,
            933,
            934,
            935,
            941,
            942,
            943,
            964,
            974,
            976,
            986,
            988,
            989,
            996,
            997,
            1004,
            1005,
            1007,
            1008,
            1009,
            1010,
            1011,
            1012,
            1013,
            1014,
            1018,
            1023,
            1024,
            1036,
            1037,
            1042,
            1043,
            1044,
            1046,
            1047,
            1048,
            1055,
            1057,
            1058,
            1059,
            1060,
            1061,
            1063,
            1064,
            1065,
            1066,
            1078,
            1079,
            1082,
            1085,
            1095,
            1097,
            1099,
            1100,
            1101,
            1102,
            1103,
            1104,
            1105,
            1106,
            1107,
            1108,
            1109,
            1110,
            1111,
            1112,
            1114,
            1118,
            1123,
            1176,
            1178,
            1179,
            1180,
            1181,
            1182,
            1557,
            1558,
            1559,
            1560,
            1561,
            1562,
            1563,
            1564,
            1565,
            1566,
            1568,
            1571,
            1578,
            1579,
            1585,
            1586,
            1596,
            1597,
            1598,
            1603,
            1619,
            1620,
            1623,
            1624,
            1627,
            1628,
            1629,
            1637,
            1638,
            1639,
            1640,
            1641,
            1647,
            1648,
            1649,
            1656,
            1657,
            1661
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.086
      }
   },
   "coverage_percentage": 50.67,
   "types_in_use": [
      "logging.Logger",
      "pathlib.WindowsPath",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "unified_test_coverage": [
      1557,
      1558,
      1559,
      1560,
      1561,
      1562,
      1563,
      1564,
      1565,
      1566,
      1568,
      1571,
      1578,
      1579,
      1585,
      1586,
      1596,
      1597,
      1598,
      1603,
      1619,
      1620,
      1623,
      1624,
      1627,
      1628,
      1629,
      1637,
      1638,
      1639,
      1640,
      1641,
      1647,
      1648,
      1649,
      1656,
      1657,
      1661
   ],
   "needs_pytest": false,
   "exceptions_raised": []
}