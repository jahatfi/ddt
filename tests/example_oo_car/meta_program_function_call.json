{
   "name": "meta_program_function_call",
   "parameter_names": [
      "this_state",
      "tab",
      "package",
      "function_metadata"
   ],
   "is_method": false,
   "source_file": null,
   "lines": [
      1581,
      1582,
      1583,
      1584,
      1585,
      1586,
      1587,
      1586,
      1588,
      1589,
      1590,
      1592,
      1595,
      1597,
      1598,
      1602,
      1603,
      1605,
      1606,
      1607,
      1609,
      1610,
      1611,
      1612,
      1613,
      1614,
      1617,
      1620,
      1621,
      1622,
      1623,
      1624,
      1627,
      1629,
      1630,
      1631,
      1632,
      1633,
      1634,
      1635,
      1636,
      1637,
      1639,
      1643,
      1644,
      1646,
      1647,
      1648,
      1649,
      1651,
      1652,
      1653,
      1654,
      1655,
      1656,
      1657,
      1658,
      1659,
      1661,
      1662,
      1663,
      1664,
      1665,
      1666,
      1667,
      1668,
      1671,
      1672,
      1673,
      1680,
      1681,
      1683,
      1684,
      1685
   ],
   "non_code_lines": [
      1591,
      1593,
      1594,
      1596,
      1599,
      1600,
      1601,
      1604,
      1608,
      1615,
      1616,
      1618,
      1619,
      1625,
      1626,
      1628,
      1638,
      1640,
      1641,
      1642,
      1645,
      1650,
      1660,
      1669,
      1670,
      1674,
      1675,
      1676,
      1677,
      1678,
      1679,
      1682
   ],
   "coverage_io": {
      "76302d3d963e8ccc2534a806fa0fd073ebb2445fecbd8c2a3eb4da8f3b41964e": {
         "args": [
            "CoverageInfo(args=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], kwargs={}, globals_before={}, globals_after={}, expected_result='CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1417, 1420, 1424, 1433, 1434, 1437], exception_type='', exception_message='', constructor='', cost=0.002)",
            "\"  \"",
            "\"unit_test_generator\"",
            "FunctionMetaData(name='update_global', lines=[1417, 1418, 1419, 1420, 1421, 1422, 1424, 1433, 1434, 1435, 1436, 1437], parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'827ce9f30381c4cf8356fd85510849bde9e1eb403ab9893a609b1ffccaaf39eb': CoverageInfo(args=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], kwargs={}, globals_before={}, globals_after={}, expected_result='CoverageInfo(args=[\\'-1\\', \\'1\\'], kwargs={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1417, 1420, 1424, 1433, 1434, 1437], exception_type='', exception_message='', constructor='', cost=0.002)}, coverage_percentage=50.0, types_in_use={'src.unit_test_generator.CoverageInfo', 'logging.Logger'}, unified_test_coverage={1417, 1420, 1424, 1433, 1434, 1437}, needs_pytest=False)"
         ],
         "kwargs": {},
         "globals_before": {},
         "globals_after": {},
         "expected_result": "['    result = unit_test_generator.update_global(obj,this_global,phase,this_coverage_info)\\n', '    assert isinstance(result, expected_type)\\n', '    assert result == expected_result or result == eval(expected_result)\\n']",
         "expected_type": "list",
         "coverage": [
            228,
            229,
            230,
            231,
            232,
            234,
            237,
            238,
            239,
            242,
            246,
            247,
            251,
            252,
            256,
            257,
            261,
            263,
            264,
            274,
            275,
            282,
            283,
            284,
            285,
            313,
            315,
            316,
            317,
            320,
            321,
            444,
            445,
            460,
            465,
            470,
            471,
            472,
            474,
            475,
            476,
            478,
            479,
            480,
            484,
            488,
            494,
            495,
            499,
            501,
            502,
            507,
            514,
            522,
            534,
            535,
            699,
            700,
            714,
            720,
            723,
            724,
            725,
            736,
            738,
            741,
            743,
            763,
            764,
            768,
            782,
            833,
            835,
            838,
            839,
            841,
            843,
            852,
            858,
            860,
            863,
            864,
            865,
            866,
            867,
            869,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            912,
            913,
            915,
            916,
            917,
            918,
            919,
            921,
            923,
            929,
            930,
            931,
            933,
            934,
            939,
            940,
            941,
            943,
            952,
            953,
            955,
            956,
            957,
            958,
            964,
            965,
            966,
            987,
            997,
            999,
            1009,
            1011,
            1012,
            1019,
            1020,
            1027,
            1028,
            1030,
            1031,
            1032,
            1033,
            1034,
            1035,
            1036,
            1037,
            1041,
            1046,
            1047,
            1059,
            1060,
            1065,
            1066,
            1067,
            1069,
            1070,
            1071,
            1078,
            1080,
            1081,
            1082,
            1083,
            1084,
            1086,
            1087,
            1088,
            1089,
            1101,
            1102,
            1105,
            1108,
            1118,
            1120,
            1122,
            1123,
            1124,
            1125,
            1126,
            1128,
            1129,
            1131,
            1132,
            1133,
            1134,
            1135,
            1136,
            1137,
            1139,
            1143,
            1144,
            1145,
            1199,
            1201,
            1202,
            1203,
            1204,
            1205,
            1581,
            1582,
            1583,
            1584,
            1585,
            1586,
            1587,
            1588,
            1589,
            1590,
            1592,
            1595,
            1602,
            1603,
            1609,
            1610,
            1620,
            1621,
            1622,
            1627,
            1643,
            1644,
            1647,
            1648,
            1651,
            1652,
            1653,
            1661,
            1662,
            1663,
            1664,
            1665,
            1671,
            1672,
            1673,
            1680,
            1681,
            1685
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.231
      }
   },
   "coverage_percentage": 51.35,
   "types_in_use": [
      "logging.Logger",
      "pathlib.WindowsPath",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "global_vars_read_from": [
      "logger"
   ],
   "global_vars_written_to": [],
   "unified_test_coverage": [
      1581,
      1582,
      1583,
      1584,
      1585,
      1586,
      1587,
      1588,
      1589,
      1590,
      1592,
      1595,
      1602,
      1603,
      1609,
      1610,
      1620,
      1621,
      1622,
      1627,
      1643,
      1644,
      1647,
      1648,
      1651,
      1652,
      1653,
      1661,
      1662,
      1663,
      1664,
      1665,
      1671,
      1672,
      1673,
      1680,
      1681,
      1685
   ],
   "needs_pytest": false,
   "exceptions_raised": []
}