"""
Programmatically generated test function for auto_generate_tests()
"""
import re
import pytest
from src import unit_test_generator
from _pytest.monkeypatch import MonkeyPatch

# Now import modules specific to auto_generate_tests:
from pprint import PrettyPrinter
from src.unit_test_generator import CoverageInfo
from pathlib import WindowsPath
from collections import defaultdict
from src.unit_test_generator import FunctionMetaData
from logging import Logger
ALL_METADATA = defaultdict(<class 'src.unit_test_generator.FunctionMetaData'>, {'update_global': FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1586, 1587, 1588, 1589, 1590, 1591, 1592, 1594, 1602, 1603, 1604, 1605, 1606], non_code_lines={1600, 1601, 1593, 1595, 1596, 1597, 1598, 1599}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'update_global': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}), 'update_metadata': FunctionMetaData(name='update_metadata', parameter_names=['f', 'this_metadata'], is_method=False, lines=[1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1440, 1435, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1449], non_code_lines={1432, 1434, 1422, 1414}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'55b7a73ac7c219848248cede23e61c86b7052ec221c605dbaa7de194e19189cc': CoverageInfo(args_before=['<function get_item_at_index at 0x0000023CA9B33EC0>', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after=OrderedDict([('this_metadata', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'get_item_at_index': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\all_types\\\\all_types.py'})")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=61.54, types_in_use={'pathlib.WindowsPath', 'logging.Logger', 'src.unit_test_generator.FunctionMetaData', 'all_types'}, unified_test_coverage={1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448}, needs_pytest=False, callable_files={'update_metadata': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}), 'get_item_at_index': FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={'1edeba54a64658dddb0ff23a35c06b12b5a92ff815a4fa728a18b112ca3f5a8a': CoverageInfo(args_before=['"The quick red fox jumped over the lazy brown dog"', '3'], args_after=OrderedDict(), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=' ', expected_type='str', coverage=[29, 31, 33, 36], exception_type='', exception_message='', constructor='', cost=0.0), '5ac62d59657bfac04cf3ce48377adb129cadd4a9805d0ac28817844589527dd0': CoverageInfo(args_before=['(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)', '50'], args_after=OrderedDict([('iterable', '(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[29, 31, 32], exception_type="<class 'ValueError'>", exception_message='index must be in range [0, 9], was 50', constructor='', cost=0.0), '6ada6749e00170edea0441df3c3aaa576d3c3ccd15b95326f404c2c08c0cfb9a': CoverageInfo(args_before=['[-1, -2, -3, -4]', '0'], args_after=OrderedDict([('iterable', '[-1, -2, -3, -4]')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='-1', expected_type='int', coverage=[29, 31, 33, 36], exception_type='', exception_message='', constructor='', cost=0.0), '4af9da0fec2cbcc1502be3a9e1783eac06314de8c4435addbe985665e569908d': CoverageInfo(args_before=['"a test string"', '-5'], args_after=OrderedDict(), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[29, 31, 33, 34], exception_type="<class 'ValueError'>", exception_message='index must be in range [0, 12], was -5', constructor='', cost=0.0)}, coverage_percentage=85.71, types_in_use=set(), unified_test_coverage={32, 33, 34, 36, 29, 31}, needs_pytest=True, callable_files={'get_item_at_index': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\all_types\\all_types.py'})})
  # In sum, these tests covered 54.17% of auto_generate_tests's lines
  # Line(s) not covered by ANY of the tests below:
  # ['2048', '2052', '2064-2065', '2069-2072', '2074', '2076', '2099', '2103', '2105-2106', '2108-2113', '2115', '2117-2118', '2120-2122', '2125', '2127', '2132', '2134', '2136-2137', '2141-2143', '2147-2158', '2168', '2172', '2187', '2197-2198', '2200', '2205-2206', '2208-2209', '2229-2231', '2249-2250', '2252-2257', '1886', '1905-1910', '1912-1913', '1915-1916', '1926-1929', '1931', '1941-1942', '1955-1956', '1958', '1976', '1980-1981', '1983-1984', '1990-1991', '1993-1994', '1996-1997', '2004', '2007-2008', '2015', '2019-2027', '2029-2030', '2032', '2034-2035', '2037-2039', '2041']
@pytest.mark.parametrize(
"function_metadata, state, function_name, source_file, tests_dir, outdir, indent_size, expected_result, args_after, globals_before",
[(FunctionMetaData(name='update_metadata', parameter_names=['f', 'this_metadata'], is_method=False, lines=[1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1440, 1435, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1449], non_code_lines={1432, 1434, 1422, 1414}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'55b7a73ac7c219848248cede23e61c86b7052ec221c605dbaa7de194e19189cc': CoverageInfo(args_before=['<function get_item_at_index at 0x0000023CA9B33EC0>', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after=OrderedDict([('this_metadata', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'get_item_at_index': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\all_types\\\\all_types.py'})")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=61.54, types_in_use={'pathlib.WindowsPath', 'logging.Logger', 'src.unit_test_generator.FunctionMetaData', 'all_types'}, unified_test_coverage={1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448}, needs_pytest=False, callable_files={'update_metadata': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}),{'55b7a73ac7c219848248cede23e61c86b7052ec221c605dbaa7de194e19189cc': CoverageInfo(args_before=['<function get_item_at_index at 0x0000023CA9B33EC0>', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after=OrderedDict([('this_metadata', "FunctionMetaData(name='get_item_at_index', parameter_names=['iterable', 'index'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'get_item_at_index': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\all_types\\\\all_types.py'})")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448], exception_type='', exception_message='', constructor='', cost=0.0)},"update_metadata",WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'),WindowsPath('.'),WindowsPath('.'),'1fbe0a44c2a782f985566cccd21c7b422d52ddd333521a966c82de2c70f8c2d1',{'function_metadata': 'FunctionMetaData(name=\'update_metadata\', parameter_names=[\'f\', \'this_metadata\'], is_method=False, lines=[1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1440, 1435, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1449], non_code_lines={1432, 1434, 1422, 1414}, global_vars_read_from={\'logger\'}, global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py\'), coverage_io={\'55b7a73ac7c219848248cede23e61c86b7052ec221c605dbaa7de194e19189cc\': CoverageInfo(args_before=[\'<function get_item_at_index at 0x0000023CA9B33EC0>\', "FunctionMetaData(name=\'get_item_at_index\', parameter_names=[\'iterable\', \'index\'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py\'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after=OrderedDict([(\'this_metadata\', "FunctionMetaData(name=\'get_item_at_index\', parameter_names=[\'iterable\', \'index\'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py\'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={\'get_item_at_index\': \'C:\\\\\\\\Users\\\\\\\\James\\\\\\\\Documents\\\\\\\\CyberResources\\\\\\\\ddt\\\\\\\\tests\\\\\\\\all_types\\\\\\\\all_types.py\'})")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\'None\', expected_type=\'NoneType\', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)}, coverage_percentage=61.54, types_in_use={\'pathlib.WindowsPath\', \'logging.Logger\', \'src.unit_test_generator.FunctionMetaData\', \'all_types\'}, unified_test_coverage={1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448}, needs_pytest=False, callable_files={\'update_metadata\': \'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py\'})', 'state': '{\'55b7a73ac7c219848248cede23e61c86b7052ec221c605dbaa7de194e19189cc\': CoverageInfo(args_before=[\'<function get_item_at_index at 0x0000023CA9B33EC0>\', "FunctionMetaData(name=\'get_item_at_index\', parameter_names=[\'iterable\', \'index\'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py\'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after={\'this_metadata\': "FunctionMetaData(name=\'get_item_at_index\', parameter_names=[\'iterable\', \'index\'], is_method=False, lines=[29, 30, 31, 32, 33, 34, 36], non_code_lines={35}, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/tests/all_types/all_types.py\'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={\'get_item_at_index\': \'C:\\\\\\\\Users\\\\\\\\James\\\\\\\\Documents\\\\\\\\CyberResources\\\\\\\\ddt\\\\\\\\tests\\\\\\\\all_types\\\\\\\\all_types.py\'})"}, kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\'None\', expected_type=\'NoneType\', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1435, 1443, 1444, 1445, 1446, 1447, 1448], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)}', 'source_file': "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')", 'tests_dir': "WindowsPath('.')", 'outdir': "WindowsPath('.')"},{}),
])
def test_auto_generate_tests(function_metadata, state, function_name, source_file, tests_dir, outdir, indent_size, expected_result, args_after, globals_before):
    """
    Programmatically generated test function for auto_generate_tests()
    """
    monkeypatch = MonkeyPatch()
    monkeypatch.setattr(unit_test_generator, "all_metadata", ALL_METADATA)
    result = unit_test_generator.auto_generate_tests(function_metadata,state,function_name,source_file,tests_dir,outdir,indent_size)
    assert result == expected_result or result == eval(expected_result)
    assert function_metadata == eval(args_after["function_metadata"]) or args_after["function_metadata"] == function_metadata
    assert state == eval(args_after["state"]) or args_after["state"] == state
    assert source_file == eval(args_after["source_file"]) or args_after["source_file"] == source_file
    assert tests_dir == eval(args_after["tests_dir"]) or args_after["tests_dir"] == tests_dir
    assert outdir == eval(args_after["outdir"]) or args_after["outdir"] == outdir
