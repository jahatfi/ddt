{
   "name": "auto_generate_tests",
   "parameter_names": [
      "function_metadata",
      "state",
      "function_name",
      "source_file",
      "tests_dir",
      "outdir",
      "indent_size"
   ],
   "is_method": false,
   "source_file": null,
   "lines": [
      1895,
      1896,
      1897,
      1898,
      1899,
      1901,
      1902,
      1903,
      1904,
      1909,
      1915,
      1916,
      1917,
      1918,
      1919,
      1920,
      1921,
      1922,
      1923,
      1925,
      1926,
      1927,
      1928,
      1929,
      1928,
      1931,
      1932,
      1934,
      1935,
      1937,
      1938,
      1939,
      1940,
      1941,
      1942,
      1944,
      1945,
      1946,
      1947,
      1948,
      1949,
      1951,
      1952,
      1953,
      1956,
      1958,
      1959,
      1960,
      1961,
      1963,
      1964,
      1962,
      1966,
      1969,
      1971,
      1972,
      1973,
      1974,
      1975,
      1976,
      1977,
      1978,
      1980,
      1982,
      1983,
      1984,
      1985,
      1987,
      1988,
      1989,
      1990,
      1991,
      1992,
      1993,
      1994,
      1995,
      1996,
      1997,
      1998,
      1999,
      2000,
      2001,
      2002,
      2003,
      2004,
      2005,
      2006,
      2007,
      2008,
      2009,
      2010,
      2011,
      2012,
      2013,
      2014,
      2015,
      2016,
      2017,
      2018,
      2019,
      2020,
      2021,
      2022,
      2024,
      2026,
      2027,
      2028,
      2029,
      2030,
      2028,
      2032,
      2033,
      2034,
      2035,
      2036,
      2037,
      2038,
      2039,
      2040,
      2041,
      2042,
      2043,
      2044,
      2045,
      2046,
      2047,
      2048,
      2049,
      2048,
      2041,
      2050,
      2051,
      2052,
      2054,
      2055,
      2056,
      2057,
      2059,
      2060,
      2061,
      2063,
      2065,
      2066,
      2067,
      2068,
      2069,
      2070,
      2072,
      2074,
      2075,
      2076,
      2077,
      2081,
      2082,
      2083,
      2084,
      2085,
      2086,
      2087,
      2091,
      2092,
      2093,
      2094,
      2095,
      2096,
      2097,
      2098,
      2100,
      2101,
      2102,
      2103,
      2104,
      2105,
      2106,
      2107,
      2108,
      2109,
      2110,
      2113,
      2116,
      2117,
      2118,
      2119,
      2120,
      2121,
      2122,
      2123,
      2125,
      2127,
      2128,
      2130,
      2131,
      2132,
      2133,
      2134,
      2135,
      2137,
      2139,
      2140,
      2142,
      2143,
      2144,
      2146,
      2147,
      2148,
      2149,
      2152,
      2153,
      2154,
      2156,
      2158,
      2159,
      2160,
      2162,
      2163,
      2164,
      2165,
      2162,
      2166,
      2168,
      2169,
      2170,
      2171,
      2172,
      2173,
      2174,
      2175,
      2176,
      2177,
      2178,
      2179,
      2180,
      2185,
      2186,
      2190,
      2192,
      2193,
      2194,
      2196,
      2198,
      2199,
      2200,
      2203,
      2204,
      2208,
      2209,
      2211,
      2213,
      2214,
      2215,
      2216,
      2217,
      2218,
      2219,
      2220,
      2218,
      2221,
      2222,
      2223,
      2224,
      2225,
      2226,
      2227,
      2228,
      2229,
      2230,
      2231,
      2232,
      2233,
      2237,
      2238,
      2239,
      2240,
      2242,
      2243,
      2244,
      2245,
      2247,
      2251,
      2252,
      2253,
      2255,
      2256,
      2257,
      2258,
      2259,
      2260,
      2261,
      2262,
      2263,
      2262,
      2257,
      2265,
      2269,
      2270,
      2271,
      2272,
      2270,
      2274,
      2275,
      2276,
      2277,
      2278,
      2279,
      2274,
      2281,
      2283,
      2284,
      2285,
      2286,
      2284,
      2288,
      2289,
      2290,
      2291,
      2292,
      2293,
      2288,
      2295,
      2298,
      2299,
      2300,
      1920,
      2001,
      2004,
      2008,
      2011,
      2014,
      2017,
      2033,
      2034,
      2185
   ],
   "non_code_lines": [
      1900,
      1905,
      1906,
      1907,
      1908,
      1910,
      1911,
      1912,
      1913,
      1914,
      1924,
      1930,
      1933,
      1936,
      1943,
      1950,
      1954,
      1955,
      1957,
      1965,
      1967,
      1968,
      1970,
      1979,
      1981,
      1986,
      2023,
      2025,
      2031,
      2053,
      2058,
      2062,
      2064,
      2071,
      2073,
      2078,
      2079,
      2080,
      2088,
      2089,
      2090,
      2099,
      2111,
      2112,
      2114,
      2115,
      2124,
      2126,
      2129,
      2136,
      2138,
      2141,
      2145,
      2150,
      2151,
      2155,
      2157,
      2161,
      2167,
      2181,
      2182,
      2183,
      2184
   ],
   "coverage_io": {
      "2b7bd3537330e73b34ba0d26e14d0abfff5e53f90efd14824a5ee19cb5031b13": {
         "args_before": [
            "FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1599, 1600, 1601, 1602, 1603, 1604, 1605, 1607, 1615, 1616, 1617, 1618, 1619], non_code_lines={1606, 1608, 1609, 1610, 1611, 1612, 1613, 1614}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'bc219f43158bcf9bd56390fd2488dcf6143970ff6002221e94e29f0d72d381d9': CoverageInfo(args_before=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], args_after=OrderedDict([('this_coverage_info', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1599, 1602, 1607, 1615, 1616, 1619], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.PlaceHolder', 'logging.Logger', 'src.unit_test_generator.CoverageInfo', 'logging.Manager', 'logging.RootLogger', 'logging.StreamHandler'}, unified_test_coverage={1602, 1607, 1615, 1616, 1619, 1599}, needs_pytest=False, callable_files={'update_global': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py'})",
            "{'bc219f43158bcf9bd56390fd2488dcf6143970ff6002221e94e29f0d72d381d9': CoverageInfo(args_before=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], args_after=OrderedDict([('this_coverage_info', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1599, 1602, 1607, 1615, 1616, 1619], exception_type='', exception_message='', constructor='', cost=0.0)}",
            "\"update_global\"",
            "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')",
            "WindowsPath('.')",
            "WindowsPath('.')",
            "2"
         ],
         "args_after": {
            "function_metadata": "FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1599, 1600, 1601, 1602, 1603, 1604, 1605, 1607, 1615, 1616, 1617, 1618, 1619], non_code_lines={1606, 1608, 1609, 1610, 1611, 1612, 1613, 1614}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'bc219f43158bcf9bd56390fd2488dcf6143970ff6002221e94e29f0d72d381d9': CoverageInfo(args_before=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], args_after=OrderedDict([('this_coverage_info', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1599, 1602, 1607, 1615, 1616, 1619], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.PlaceHolder', 'logging.Logger', 'src.unit_test_generator.CoverageInfo', 'logging.Manager', 'logging.RootLogger', 'logging.StreamHandler'}, unified_test_coverage={1602, 1607, 1615, 1616, 1619, 1599}, needs_pytest=False, callable_files={'update_global': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py'})",
            "state": "{'bc219f43158bcf9bd56390fd2488dcf6143970ff6002221e94e29f0d72d381d9': CoverageInfo(args_before=['0', '\"method_call_counter\"', '\"Before\"', 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'], args_after={'this_coverage_info': 'CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)'}, kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='CoverageInfo(args_before=[\\'-1\\', \\'1\\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\\'method_call_counter\\': 0}, globals_after={}, expected_result=\\'\\', expected_type=\\'\\', coverage=[], exception_type=\\'\\', exception_message=\\'\\', constructor=\\'Car(\"Red\", 10, 0)\\', cost=0.0)', expected_type='src.unit_test_generator.CoverageInfo', coverage=[1599, 1602, 1607, 1615, 1616, 1619], exception_type='', exception_message='', constructor='', cost=0.0)}",
            "source_file": "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')",
            "tests_dir": "WindowsPath('.')",
            "outdir": "WindowsPath('.')"
         },
         "kwargs": {},
         "kwargs_after": {},
         "globals_before": {
            "all_metadata": {
               "update_global": {
                  "name": "update_global",
                  "parameter_names": [
                     "obj",
                     "this_global",
                     "phase",
                     "this_coverage_info"
                  ],
                  "is_method": false,
                  "source_file": null,
                  "lines": [
                     1599,
                     1600,
                     1601,
                     1602,
                     1603,
                     1604,
                     1605,
                     1607,
                     1615,
                     1616,
                     1617,
                     1618,
                     1619
                  ],
                  "non_code_lines": [
                     1606,
                     1608,
                     1609,
                     1610,
                     1611,
                     1612,
                     1613,
                     1614
                  ],
                  "coverage_io": {
                     "bc219f43158bcf9bd56390fd2488dcf6143970ff6002221e94e29f0d72d381d9": {
                        "args_before": [
                           "0",
                           "\"method_call_counter\"",
                           "\"Before\"",
                           "CoverageInfo(args_before=['-1', '1'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='Car(\"Red\", 10, 0)', cost=0.0)"
                        ],
                        "args_after": {
                           "this_coverage_info": "CoverageInfo(args_before=['-1', '1'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'method_call_counter': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='Car(\"Red\", 10, 0)', cost=0.0)"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "CoverageInfo(args_before=['-1', '1'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'method_call_counter': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='Car(\"Red\", 10, 0)', cost=0.0)",
                        "expected_type": "src.unit_test_generator.CoverageInfo",
                        "coverage": [
                           1599,
                           1602,
                           1607,
                           1615,
                           1616,
                           1619
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 46.15,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "src.unit_test_generator.CoverageInfo"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     1599,
                     1602,
                     1607,
                     1615,
                     1616,
                     1619
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "update_global": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
                  }
               },
               "update_metadata": {
                  "name": "update_metadata",
                  "parameter_names": [
                     "f",
                     "this_metadata"
                  ],
                  "is_method": false,
                  "source_file": null,
                  "lines": [
                     1423,
                     1424,
                     1425,
                     1427,
                     1428,
                     1429,
                     1430,
                     1431,
                     1432,
                     1433,
                     1435,
                     1436,
                     1437,
                     1438,
                     1439,
                     1440,
                     1441,
                     1442,
                     1443,
                     1445,
                     1447,
                     1448,
                     1449,
                     1450,
                     1451,
                     1452,
                     1453,
                     1454,
                     1452,
                     1447,
                     1455,
                     1456,
                     1457,
                     1458,
                     1459,
                     1460,
                     1461,
                     1462,
                     1461
                  ],
                  "non_code_lines": [
                     1426,
                     1434,
                     1444,
                     1446
                  ],
                  "coverage_io": {
                     "c4a9a4bb06fc5008c1d7af9bb9608416e4e0194bb725b84c1d5eeb60280befd2": {
                        "args_before": [
                           {},
                           "FunctionMetaData(name='Car.__init__', parameter_names=['self', 'color', 'speed', 'steer_angle'], is_method=True, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/oo_car/car.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"
                        ],
                        "args_after": {
                           "this_metadata": "FunctionMetaData(name='Car.__init__', parameter_names=['self', 'color', 'speed', 'steer_angle'], is_method=True, lines=[41, 42, 43], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/oo_car/car.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'__init__': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\oo_car\\\\car.py'})"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           1423,
                           1425,
                           1427,
                           1428,
                           1429,
                           1430,
                           1431,
                           1432,
                           1433,
                           1435,
                           1437,
                           1438,
                           1439,
                           1440,
                           1441,
                           1447,
                           1455,
                           1456,
                           1457,
                           1458,
                           1459,
                           1460
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 56.41,
                  "types_in_use": [
                     "car.Car",
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "pathlib.WindowsPath",
                     "src.unit_test_generator.FunctionMetaData"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     1423,
                     1425,
                     1427,
                     1428,
                     1429,
                     1430,
                     1431,
                     1432,
                     1433,
                     1435,
                     1437,
                     1438,
                     1439,
                     1440,
                     1441,
                     1447,
                     1455,
                     1456,
                     1457,
                     1458,
                     1459,
                     1460
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "update_metadata": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
                  }
               },
               "Car.__init__": {
                  "name": "Car.__init__",
                  "parameter_names": [
                     "self",
                     "color",
                     "speed",
                     "steer_angle"
                  ],
                  "is_method": true,
                  "source_file": null,
                  "lines": [
                     41,
                     42,
                     43
                  ],
                  "non_code_lines": [],
                  "coverage_io": {
                     "c878113de933bc35ec08d5024d0aae800d76ba42b32be7f1075b8a7586805a2c": {
                        "args_before": [
                           "\"Red\"",
                           "10",
                           "0"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           41,
                           42,
                           43
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 100.0,
                  "types_in_use": [],
                  "global_vars_read_from": [],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     41,
                     42,
                     43
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "__init__": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\oo_car\\car.py"
                  }
               },
               "Car.gas": {
                  "name": "Car.gas",
                  "parameter_names": [
                     "self",
                     "rate",
                     "duration"
                  ],
                  "is_method": true,
                  "source_file": null,
                  "lines": [
                     66,
                     67,
                     68,
                     69,
                     70,
                     71
                  ],
                  "non_code_lines": [],
                  "coverage_io": {
                     "78e4f6e57c2f532c43747e020340acf548111ebba3a4dfbb9b7a12af2d0fa659": {
                        "args_before": [
                           "-1",
                           "1"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "method_call_counter": 0
                        },
                        "globals_after": {
                           "method_call_counter": 1
                        },
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           66,
                           67,
                           68,
                           69
                        ],
                        "exception_type": "<class 'ValueError'>",
                        "exception_message": "Gas rate (m/s) must be positive.",
                        "constructor": "Car(\"Red\", 10, 0)",
                        "cost": 0.0
                     },
                     "6489cc7d9835b1fc422a9e25a2d99a7374cf0a90d0450a9435df3167635e432a": {
                        "args_before": [
                           "2",
                           "2"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "method_call_counter": 1
                        },
                        "globals_after": {
                           "method_call_counter": 2
                        },
                        "expected_result": "16",
                        "expected_type": "int",
                        "coverage": [
                           66,
                           67,
                           68,
                           70,
                           71
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"White\", 12, -30)",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 100.0,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "tests.oo_car.car.Car"
                  ],
                  "global_vars_read_from": [
                     "logger",
                     "method_call_counter"
                  ],
                  "global_vars_written_to": [
                     "method_call_counter"
                  ],
                  "unified_test_coverage": [
                     66,
                     67,
                     68,
                     69,
                     70,
                     71
                  ],
                  "needs_pytest": true,
                  "exceptions_raised": [
                     "<class 'ValueError'>"
                  ],
                  "callable_files": {
                     "gas": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\oo_car\\car.py"
                  }
               },
               "Car.brake": {
                  "name": "Car.brake",
                  "parameter_names": [
                     "self",
                     "rate",
                     "duration"
                  ],
                  "is_method": true,
                  "source_file": null,
                  "lines": [
                     50,
                     51,
                     52,
                     53,
                     54,
                     55,
                     56
                  ],
                  "non_code_lines": [],
                  "coverage_io": {
                     "79d14ba2847338fe6989a7d3640887679f88b2cfadee250647df044fe4abc0b9": {
                        "args_before": [
                           "-1",
                           "1"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "9",
                        "expected_type": "int",
                        "coverage": [
                           50,
                           51,
                           53,
                           55,
                           56
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"Red\", 10, 0)",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 71.43,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "tests.oo_car.car.Car"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     50,
                     51,
                     53,
                     55,
                     56
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "brake": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\oo_car\\car.py"
                  }
               },
               "Car.change_steer_angle": {
                  "name": "Car.change_steer_angle",
                  "parameter_names": [
                     "self",
                     "angle"
                  ],
                  "is_method": true,
                  "source_file": null,
                  "lines": [
                     79,
                     80,
                     81,
                     83,
                     86,
                     87,
                     86,
                     88,
                     86,
                     90
                  ],
                  "non_code_lines": [
                     82,
                     84,
                     85,
                     89
                  ],
                  "coverage_io": {
                     "9e5729283fb4205cc004e81e18786a627d2eb0f21140111b0a77b56ac7ded037": {
                        "args_before": [
                           "30"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "30",
                        "expected_type": "int",
                        "coverage": [
                           79,
                           80,
                           83,
                           86,
                           90
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"Red\", 9, 0)",
                        "cost": 0.0
                     },
                     "78fd5f6e8e8bd7118d1ec9602907dd07a7495e42f6814cd047a8057a96388cd7": {
                        "args_before": [
                           "90"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "60",
                        "expected_type": "int",
                        "coverage": [
                           79,
                           80,
                           83,
                           86,
                           90
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"White\", 20, -30)",
                        "cost": 0.0
                     },
                     "4e6967deeb4e51bab447208d79037a8bca61cdf648fb62d21885290b177313f6": {
                        "args_before": [
                           "180"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "210",
                        "expected_type": "int",
                        "coverage": [
                           79,
                           80,
                           83,
                           86,
                           90
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"Blue\", 0.0, 30)",
                        "cost": 0.0
                     },
                     "9da25bda4c0856a5b359c8df1d926a3ed762a3d8f6f58108d234a201cb75d875": {
                        "args_before": [
                           "-1080"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           79,
                           80,
                           81
                        ],
                        "exception_type": "<class 'AssertionError'>",
                        "exception_message": "angle=-1080    out of bounds!",
                        "constructor": "Car(\"Green\", 48, 90)",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 60.0,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "tests.oo_car.car.Car"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     79,
                     80,
                     81,
                     83,
                     86,
                     90
                  ],
                  "needs_pytest": true,
                  "exceptions_raised": [
                     "<class 'AssertionError'>"
                  ],
                  "callable_files": {
                     "change_steer_angle": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\oo_car\\car.py"
                  }
               },
               "Car.is_going_faster_than": {
                  "name": "Car.is_going_faster_than",
                  "parameter_names": [
                     "self",
                     "other_car"
                  ],
                  "is_method": true,
                  "source_file": null,
                  "lines": [
                     126
                  ],
                  "non_code_lines": [],
                  "coverage_io": {
                     "797ee52405b6b24f04cee9d62d992fd2a5592ed30653401b854ee509666247fc": {
                        "args_before": [
                           "Car(\"White\", 19, 0)"
                        ],
                        "args_after": {
                           "other_car": "Car(\"White\", 19, 0)"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "True",
                        "expected_type": "bool",
                        "coverage": [
                           126
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "Car(\"Red\", 20, 0)",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 100.0,
                  "types_in_use": [
                     "__main__.Car",
                     "tests.oo_car.car.Car"
                  ],
                  "global_vars_read_from": [],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     126
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "is_going_faster_than": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\oo_car\\car.py"
                  }
               }
            }
         },
         "globals_after": {},
         "expected_result": "252acc6c11e8af0020608482027ff01a094facec4dddd6c5b97a134d630b6692",
         "expected_type": "str",
         "coverage": [
            1895,
            1896,
            1897,
            1898,
            1901,
            1902,
            1903,
            1904,
            1909,
            1915,
            1916,
            1917,
            1927,
            1931,
            1932,
            1934,
            1935,
            1937,
            1938,
            1956,
            1958,
            1959,
            1960,
            1961,
            1962,
            1966,
            1969,
            1971,
            1972,
            1973,
            1974,
            1975,
            1976,
            1982,
            1983,
            1984,
            1985,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1999,
            2000,
            2001,
            2004,
            2007,
            2008,
            2009,
            2010,
            2011,
            2014,
            2017,
            2020,
            2021,
            2022,
            2024,
            2027,
            2028,
            2032,
            2033,
            2034,
            2035,
            2036,
            2038,
            2039,
            2040,
            2050,
            2055,
            2065,
            2066,
            2067,
            2069,
            2072,
            2075,
            2076,
            2077,
            2081,
            2082,
            2083,
            2084,
            2085,
            2095,
            2097,
            2100,
            2101,
            2102,
            2103,
            2113,
            2116,
            2117,
            2118,
            2119,
            2120,
            2122,
            2123,
            2146,
            2148,
            2152,
            2153,
            2160,
            2162,
            2166,
            2168,
            2185,
            2186,
            2192,
            2193,
            2196,
            2198,
            2199,
            2200,
            2203,
            2204,
            2208,
            2211,
            2213,
            2214,
            2215,
            2216,
            2217,
            2218,
            2221,
            2223,
            2224,
            2225,
            2226,
            2229,
            2232,
            2233,
            2237,
            2238,
            2239,
            2240,
            2242,
            2243,
            2244,
            2245,
            2247,
            2255,
            2256,
            2257,
            2258,
            2259,
            2260,
            2261,
            2262,
            2263,
            2265,
            2269,
            2270,
            2281,
            2283,
            2284,
            2295,
            2298,
            2299,
            2300
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 1.62
      }
   },
   "coverage_percentage": 49.4,
   "types_in_use": [
      "_io.TextIOWrapper",
      "collections.OrderedDict",
      "collections.defaultdict",
      "logging.Logger",
      "logging.Manager",
      "logging.PlaceHolder",
      "logging.RootLogger",
      "logging.StreamHandler",
      "pathlib.WindowsPath",
      "pprint.PrettyPrinter",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "global_vars_read_from": [
      "CalledProcessError",
      "all_metadata",
      "logger",
      "pp"
   ],
   "global_vars_written_to": [],
   "unified_test_coverage": [
      1895,
      1896,
      1897,
      1898,
      1901,
      1902,
      1903,
      1904,
      1909,
      1915,
      1916,
      1917,
      1927,
      1931,
      1932,
      1934,
      1935,
      1937,
      1938,
      1956,
      1958,
      1959,
      1960,
      1961,
      1962,
      1966,
      1969,
      1971,
      1972,
      1973,
      1974,
      1975,
      1976,
      1982,
      1983,
      1984,
      1985,
      1987,
      1988,
      1989,
      1990,
      1991,
      1992,
      1993,
      1994,
      1995,
      1996,
      1997,
      1999,
      2000,
      2001,
      2004,
      2007,
      2008,
      2009,
      2010,
      2011,
      2014,
      2017,
      2020,
      2021,
      2022,
      2024,
      2027,
      2028,
      2032,
      2033,
      2034,
      2035,
      2036,
      2038,
      2039,
      2040,
      2050,
      2055,
      2065,
      2066,
      2067,
      2069,
      2072,
      2075,
      2076,
      2077,
      2081,
      2082,
      2083,
      2084,
      2085,
      2095,
      2097,
      2100,
      2101,
      2102,
      2103,
      2113,
      2116,
      2117,
      2118,
      2119,
      2120,
      2122,
      2123,
      2146,
      2148,
      2152,
      2153,
      2160,
      2162,
      2166,
      2168,
      2185,
      2186,
      2192,
      2193,
      2196,
      2198,
      2199,
      2200,
      2203,
      2204,
      2208,
      2211,
      2213,
      2214,
      2215,
      2216,
      2217,
      2218,
      2221,
      2223,
      2224,
      2225,
      2226,
      2229,
      2232,
      2233,
      2237,
      2238,
      2239,
      2240,
      2242,
      2243,
      2244,
      2245,
      2247,
      2255,
      2256,
      2257,
      2258,
      2259,
      2260,
      2261,
      2262,
      2263,
      2265,
      2269,
      2270,
      2281,
      2283,
      2284,
      2295,
      2298,
      2299,
      2300
   ],
   "needs_pytest": false,
   "exceptions_raised": [],
   "callable_files": {
      "auto_generate_tests": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
   }
}