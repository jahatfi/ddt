{
   "name": "meta_program_function_call",
   "parameter_names": [
      "this_state",
      "tab",
      "package",
      "func_name",
      "result_type",
      "parameter_names",
      "raises_ex"
   ],
   "lines": [
      1568,
      1581,
      1582,
      1583,
      1584,
      1583,
      1585,
      1586,
      1587,
      1588,
      1589,
      1592,
      1594,
      1595,
      1599,
      1600,
      1602,
      1603,
      1604,
      1606,
      1607,
      1608,
      1609,
      1610,
      1613,
      1616,
      1617,
      1618,
      1619,
      1621,
      1623,
      1625,
      1637,
      1638,
      1639,
      1640,
      1641,
      1642,
      1643,
      1644,
      1645,
      1647,
      1651,
      1652,
      1654,
      1655,
      1656,
      1657,
      1659,
      1660,
      1661,
      1662,
      1663,
      1664,
      1665,
      1667,
      1668,
      1669,
      1670,
      1671,
      1672,
      1673,
      1674,
      1677,
      1678,
      1679,
      1686,
      1687,
      1689,
      1690,
      1692
   ],
   "non_code_lines": [
      1569,
      1570,
      1571,
      1572,
      1573,
      1574,
      1575,
      1576,
      1577,
      1578,
      1579,
      1580,
      1590,
      1591,
      1593,
      1596,
      1597,
      1598,
      1601,
      1605,
      1611,
      1612,
      1614,
      1615,
      1620,
      1622,
      1624,
      1626,
      1627,
      1628,
      1629,
      1630,
      1631,
      1632,
      1633,
      1634,
      1635,
      1636,
      1646,
      1648,
      1649,
      1650,
      1653,
      1658,
      1666,
      1675,
      1676,
      1680,
      1681,
      1682,
      1683,
      1684,
      1685,
      1688,
      1691
   ],
   "is_method": false,
   "global_vars_read_from": [
      "logger"
   ],
   "global_vars_written_to": [],
   "source_file": null,
   "coverage_io": {
      "3e6192b27e6740409a6110f134d78911c44b67f048a233297ba1abb4498b8caf": {
         "args": [
            "CoverageInfo(args=['0', '\"error_code\"', '\"Before\"', \"CoverageInfo(args=['6', '2'], kwargs={}, globals_before={}, globals_after={}, result='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0, result_type='')\"], kwargs={}, globals_before={}, globals_after={}, result=\"CoverageInfo(args=['6', '2'], kwargs={}, globals_before={'error_code': 0}, globals_after={}, result='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0, result_type='')\", coverage=[1411, 1414, 1418, 1427, 1428, 1432, 1434], exception_type='', exception_message='', constructor='', cost=0.002, result_type='src.unit_test_generator.CoverageInfo')",
            "\"  \"",
            "\"unit_test_generator\"",
            "\"update_global\"",
            "\"src.unit_test_generator.CoverageInfo\"",
            "['obj', 'this_global', 'phase', 'this_coverage_info']",
            "False"
         ],
         "kwargs": {},
         "globals_before": {},
         "globals_after": {},
         "result": "['    x = unit_test_generator.update_global(obj,this_global,phase,this_coverage_info)\\n', '    assert isinstance(x, return_type)\\n', '    assert x == result or repr(x) == result or x == repr(result) or x == eval(result)\\n']",
         "coverage": [
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            234,
            235,
            236,
            238,
            239,
            242,
            249,
            250,
            251,
            252,
            280,
            281,
            282,
            285,
            286,
            408,
            409,
            420,
            425,
            426,
            431,
            432,
            433,
            435,
            436,
            437,
            439,
            440,
            441,
            445,
            449,
            454,
            455,
            459,
            461,
            463,
            471,
            479,
            487,
            499,
            500,
            654,
            655,
            669,
            675,
            678,
            679,
            680,
            691,
            693,
            696,
            698,
            726,
            727,
            731,
            746,
            793,
            795,
            798,
            799,
            801,
            803,
            812,
            818,
            820,
            823,
            824,
            825,
            826,
            827,
            828,
            831,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            871,
            872,
            874,
            875,
            876,
            877,
            878,
            880,
            882,
            888,
            889,
            890,
            892,
            893,
            898,
            899,
            900,
            902,
            911,
            912,
            914,
            915,
            916,
            917,
            923,
            924,
            925,
            946,
            956,
            958,
            965,
            967,
            968,
            975,
            976,
            985,
            986,
            988,
            989,
            990,
            992,
            993,
            994,
            995,
            996,
            998,
            999,
            1003,
            1008,
            1009,
            1021,
            1022,
            1027,
            1028,
            1029,
            1031,
            1032,
            1033,
            1040,
            1042,
            1043,
            1044,
            1045,
            1046,
            1048,
            1049,
            1050,
            1051,
            1063,
            1064,
            1066,
            1069,
            1072,
            1082,
            1084,
            1086,
            1087,
            1088,
            1089,
            1090,
            1091,
            1092,
            1096,
            1097,
            1098,
            1099,
            1100,
            1101,
            1103,
            1107,
            1112,
            1165,
            1167,
            1168,
            1169,
            1170,
            1171,
            1581,
            1582,
            1583,
            1584,
            1585,
            1586,
            1587,
            1588,
            1589,
            1592,
            1599,
            1600,
            1606,
            1607,
            1616,
            1617,
            1623,
            1651,
            1652,
            1655,
            1656,
            1659,
            1660,
            1661,
            1667,
            1668,
            1669,
            1670,
            1671,
            1677,
            1678,
            1679,
            1686,
            1687,
            1692
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.176,
         "result_type": "list"
      }
   },
   "coverage_percentage": 49.3,
   "types_in_use": [
      "logging.Logger",
      "src.unit_test_generator.CoverageInfo"
   ],
   "unified_test_coverage": [
      1581,
      1582,
      1583,
      1584,
      1585,
      1586,
      1587,
      1588,
      1589,
      1592,
      1599,
      1600,
      1606,
      1607,
      1616,
      1617,
      1623,
      1651,
      1652,
      1655,
      1656,
      1659,
      1660,
      1661,
      1667,
      1668,
      1669,
      1670,
      1671,
      1677,
      1678,
      1679,
      1686,
      1687,
      1692
   ],
   "needs_pytest": false
}