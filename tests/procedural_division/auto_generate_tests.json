{
   "name": "auto_generate_tests",
   "parameter_names": [
      "function_metadata",
      "state",
      "function_name",
      "source_file",
      "tests_dir",
      "outdir",
      "indent_size"
   ],
   "is_method": false,
   "source_file": null,
   "lines": [
      1903,
      1904,
      1905,
      1906,
      1907,
      1909,
      1910,
      1911,
      1912,
      1917,
      1923,
      1924,
      1925,
      1926,
      1927,
      1928,
      1929,
      1930,
      1931,
      1933,
      1934,
      1935,
      1936,
      1937,
      1936,
      1939,
      1940,
      1942,
      1943,
      1945,
      1946,
      1947,
      1948,
      1949,
      1950,
      1952,
      1953,
      1954,
      1955,
      1956,
      1957,
      1959,
      1960,
      1961,
      1964,
      1966,
      1967,
      1968,
      1969,
      1971,
      1972,
      1970,
      1974,
      1977,
      1979,
      1980,
      1981,
      1982,
      1983,
      1984,
      1985,
      1986,
      1988,
      1990,
      1991,
      1992,
      1993,
      1995,
      1996,
      1997,
      1998,
      1999,
      2000,
      2001,
      2002,
      2003,
      2004,
      2005,
      2006,
      2007,
      2008,
      2009,
      2010,
      2011,
      2012,
      2013,
      2014,
      2015,
      2016,
      2017,
      2018,
      2019,
      2020,
      2021,
      2022,
      2023,
      2024,
      2025,
      2026,
      2027,
      2028,
      2029,
      2030,
      2032,
      2034,
      2035,
      2036,
      2037,
      2038,
      2036,
      2040,
      2041,
      2042,
      2043,
      2044,
      2045,
      2046,
      2047,
      2048,
      2049,
      2050,
      2051,
      2052,
      2053,
      2054,
      2055,
      2056,
      2057,
      2056,
      2049,
      2058,
      2059,
      2060,
      2062,
      2063,
      2064,
      2065,
      2067,
      2068,
      2069,
      2071,
      2073,
      2074,
      2075,
      2076,
      2077,
      2078,
      2080,
      2082,
      2083,
      2084,
      2085,
      2089,
      2090,
      2091,
      2092,
      2093,
      2094,
      2095,
      2099,
      2100,
      2101,
      2102,
      2103,
      2104,
      2105,
      2106,
      2108,
      2109,
      2110,
      2111,
      2112,
      2113,
      2114,
      2115,
      2116,
      2117,
      2118,
      2121,
      2124,
      2125,
      2126,
      2127,
      2128,
      2129,
      2130,
      2131,
      2133,
      2135,
      2136,
      2138,
      2139,
      2140,
      2141,
      2142,
      2143,
      2145,
      2147,
      2148,
      2150,
      2151,
      2152,
      2154,
      2155,
      2156,
      2157,
      2160,
      2161,
      2162,
      2164,
      2166,
      2167,
      2168,
      2170,
      2171,
      2172,
      2173,
      2170,
      2174,
      2176,
      2177,
      2178,
      2179,
      2180,
      2181,
      2182,
      2183,
      2184,
      2185,
      2186,
      2187,
      2188,
      2193,
      2194,
      2198,
      2200,
      2201,
      2202,
      2204,
      2206,
      2207,
      2208,
      2211,
      2212,
      2216,
      2217,
      2219,
      2221,
      2222,
      2223,
      2224,
      2225,
      2226,
      2227,
      2228,
      2226,
      2229,
      2230,
      2231,
      2232,
      2233,
      2234,
      2235,
      2236,
      2237,
      2238,
      2239,
      2240,
      2241,
      2245,
      2246,
      2247,
      2248,
      2250,
      2251,
      2252,
      2253,
      2255,
      2259,
      2260,
      2261,
      2263,
      2264,
      2265,
      2266,
      2267,
      2268,
      2269,
      2270,
      2271,
      2270,
      2265,
      2273,
      2277,
      2278,
      2279,
      2280,
      2278,
      2282,
      2283,
      2284,
      2285,
      2286,
      2287,
      2282,
      2289,
      2290,
      2306,
      2307,
      2308,
      1928,
      2009,
      2012,
      2016,
      2019,
      2022,
      2025,
      2041,
      2042,
      2193
   ],
   "non_code_lines": [
      1908,
      1913,
      1914,
      1915,
      1916,
      1918,
      1919,
      1920,
      1921,
      1922,
      1932,
      1938,
      1941,
      1944,
      1951,
      1958,
      1962,
      1963,
      1965,
      1973,
      1975,
      1976,
      1978,
      1987,
      1989,
      1994,
      2031,
      2033,
      2039,
      2061,
      2066,
      2070,
      2072,
      2079,
      2081,
      2086,
      2087,
      2088,
      2096,
      2097,
      2098,
      2107,
      2119,
      2120,
      2122,
      2123,
      2132,
      2134,
      2137,
      2144,
      2146,
      2149,
      2153,
      2158,
      2159,
      2163,
      2165,
      2169,
      2175,
      2189,
      2190,
      2191,
      2192
   ],
   "coverage_io": {
      "c6e118dddead755df659fa3cc4472e850edce05e8832cfd11b3b03aaebbe90dc": {
         "args_before": [
            "FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1607, 1608, 1609, 1610, 1611, 1612, 1613, 1615, 1623, 1624, 1625, 1626, 1627], non_code_lines={1614, 1616, 1617, 1618, 1619, 1620, 1621, 1622}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'8166805eeb92c68ad8ec5c0419539330d380bd3605464ef3e91d2dbb832dd0af': CoverageInfo(args_before=['0','\"error_code\"','\"Before\"',\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], args_after=OrderedDict([('this_coverage_info', \"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1607, 1610, 1615, 1623, 1624, 1627], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.Logger', 'logging.StreamHandler', 'logging.RootLogger', 'logging.Manager', 'logging.PlaceHolder', 'src.unit_test_generator.CoverageInfo'}, unified_test_coverage={1607, 1610, 1615, 1623, 1624, 1627}, needs_pytest=False, callable_files={'update_global': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py'})",
            "{'8166805eeb92c68ad8ec5c0419539330d380bd3605464ef3e91d2dbb832dd0af': CoverageInfo(args_before=['0','\"error_code\"','\"Before\"',\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], args_after=OrderedDict([('this_coverage_info', \"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1607, 1610, 1615, 1623, 1624, 1627], exception_type='', exception_message='', constructor='', cost=0.0)}",
            "\"update_global\"",
            "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')",
            "WindowsPath('.')",
            "WindowsPath('.')",
            "2"
         ],
         "args_after": {
            "function_metadata": "FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1607, 1608, 1609, 1610, 1611, 1612, 1613, 1615, 1623, 1624, 1625, 1626, 1627], non_code_lines={1614, 1616, 1617, 1618, 1619, 1620, 1621, 1622}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'8166805eeb92c68ad8ec5c0419539330d380bd3605464ef3e91d2dbb832dd0af': CoverageInfo(args_before=['0','\"error_code\"','\"Before\"',\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], args_after=OrderedDict([('this_coverage_info', \"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1607, 1610, 1615, 1623, 1624, 1627], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.Logger', 'logging.StreamHandler', 'logging.RootLogger', 'logging.Manager', 'logging.PlaceHolder', 'src.unit_test_generator.CoverageInfo'}, unified_test_coverage={1607, 1610, 1615, 1623, 1624, 1627}, needs_pytest=False, callable_files={'update_global': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py'})",
            "state": "{'8166805eeb92c68ad8ec5c0419539330d380bd3605464ef3e91d2dbb832dd0af': CoverageInfo(args_before=['0','\"error_code\"','\"Before\"',\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], args_after={'this_coverage_info': \"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"}, kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1607, 1610, 1615, 1623, 1624, 1627], exception_type='', exception_message='', constructor='', cost=0.0)}",
            "source_file": "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')",
            "tests_dir": "WindowsPath('.')",
            "outdir": "WindowsPath('.')"
         },
         "kwargs": {},
         "kwargs_after": {},
         "globals_before": {
            "all_metadata": {
               "update_global": {
                  "name": "update_global",
                  "parameter_names": [
                     "obj",
                     "this_global",
                     "phase",
                     "this_coverage_info"
                  ],
                  "is_method": false,
                  "source_file": null,
                  "lines": [
                     1607,
                     1608,
                     1609,
                     1610,
                     1611,
                     1612,
                     1613,
                     1615,
                     1623,
                     1624,
                     1625,
                     1626,
                     1627
                  ],
                  "non_code_lines": [
                     1614,
                     1616,
                     1617,
                     1618,
                     1619,
                     1620,
                     1621,
                     1622
                  ],
                  "coverage_io": {
                     "8166805eeb92c68ad8ec5c0419539330d380bd3605464ef3e91d2dbb832dd0af": {
                        "args_before": [
                           "0",
                           "\"error_code\"",
                           "\"Before\"",
                           "CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)"
                        ],
                        "args_after": {
                           "this_coverage_info": "CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "CoverageInfo(args_before=['6','2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)",
                        "expected_type": "src.unit_test_generator.CoverageInfo",
                        "coverage": [
                           1607,
                           1610,
                           1615,
                           1623,
                           1624,
                           1627
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 46.15,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "src.unit_test_generator.CoverageInfo"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     1607,
                     1610,
                     1615,
                     1623,
                     1624,
                     1627
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "update_global": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
                  }
               },
               "update_metadata": {
                  "name": "update_metadata",
                  "parameter_names": [
                     "f",
                     "this_metadata"
                  ],
                  "is_method": false,
                  "source_file": null,
                  "lines": [
                     1431,
                     1432,
                     1433,
                     1435,
                     1436,
                     1437,
                     1438,
                     1439,
                     1440,
                     1441,
                     1443,
                     1444,
                     1445,
                     1446,
                     1447,
                     1448,
                     1449,
                     1450,
                     1451,
                     1453,
                     1455,
                     1456,
                     1457,
                     1458,
                     1459,
                     1460,
                     1461,
                     1462,
                     1460,
                     1455,
                     1463,
                     1464,
                     1465,
                     1466,
                     1467,
                     1468,
                     1469,
                     1470,
                     1469
                  ],
                  "non_code_lines": [
                     1434,
                     1442,
                     1452,
                     1454
                  ],
                  "coverage_io": {
                     "3b7e03b8aae859800d2f91dcb379b509848e96b06e40032403fc9a05dddc38ce": {
                        "args_before": [
                           "<function divide_ints at 0x000001D91F8104A0>",
                           "FunctionMetaData(name='divide_ints', parameter_names=['a', 'b'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/procedural_division/divide_ints.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"
                        ],
                        "args_after": {
                           "this_metadata": "FunctionMetaData(name='divide_ints', parameter_names=['a', 'b'], is_method=False, lines=[32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], non_code_lines=set(), global_vars_read_from={'logger', 'error_code'}, global_vars_written_to={'error_code'}, source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/procedural_division/divide_ints.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'divide_ints': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\procedural_division\\\\divide_ints.py'})"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {},
                        "globals_after": {},
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           1431,
                           1433,
                           1435,
                           1436,
                           1437,
                           1438,
                           1439,
                           1440,
                           1441,
                           1443,
                           1445,
                           1446,
                           1447,
                           1448,
                           1449,
                           1450,
                           1451,
                           1453,
                           1455,
                           1456,
                           1457,
                           1458,
                           1459,
                           1463,
                           1464,
                           1465,
                           1466,
                           1467,
                           1468
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.01
                     }
                  },
                  "coverage_percentage": 74.36,
                  "types_in_use": [
                     "divide_ints.divide_ints",
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler",
                     "pathlib.WindowsPath",
                     "src.unit_test_generator.FunctionMetaData"
                  ],
                  "global_vars_read_from": [
                     "logger"
                  ],
                  "global_vars_written_to": [],
                  "unified_test_coverage": [
                     1431,
                     1433,
                     1435,
                     1436,
                     1437,
                     1438,
                     1439,
                     1440,
                     1441,
                     1443,
                     1445,
                     1446,
                     1447,
                     1448,
                     1449,
                     1450,
                     1451,
                     1453,
                     1455,
                     1456,
                     1457,
                     1458,
                     1459,
                     1463,
                     1464,
                     1465,
                     1466,
                     1467,
                     1468
                  ],
                  "needs_pytest": false,
                  "exceptions_raised": [],
                  "callable_files": {
                     "update_metadata": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
                  }
               },
               "divide_ints": {
                  "name": "divide_ints",
                  "parameter_names": [
                     "a",
                     "b"
                  ],
                  "is_method": false,
                  "source_file": null,
                  "lines": [
                     32,
                     33,
                     34,
                     35,
                     36,
                     37,
                     38,
                     39,
                     40,
                     41,
                     42
                  ],
                  "non_code_lines": [],
                  "coverage_io": {
                     "3c3651fe9bf9ccfdd1a1aff6a70f7ed10020457da35226255464b77c65d9b9f1": {
                        "args_before": [
                           "6",
                           "2"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "error_code": 0
                        },
                        "globals_after": {
                           "error_code": 0
                        },
                        "expected_result": "6/2=3.0",
                        "expected_type": "str",
                        "coverage": [
                           32,
                           33,
                           36,
                           39,
                           42
                        ],
                        "exception_type": "",
                        "exception_message": "",
                        "constructor": "",
                        "cost": 0.0
                     },
                     "8dcd244d9477f2f2ad357ec77e59f72415baec689cd405b8f6194849632f34bc": {
                        "args_before": [
                           "3",
                           "0"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "error_code": 0
                        },
                        "globals_after": {
                           "error_code": -3
                        },
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           32,
                           33,
                           36,
                           39,
                           40,
                           41
                        ],
                        "exception_type": "<class 'ValueError'>",
                        "exception_message": "ValueError: Cannot divide by zero!",
                        "constructor": "",
                        "cost": 0.0
                     },
                     "07a742d4d53ae6bf7189b38410c8560979026474279353f659adda1c5bcd46a8": {
                        "args_before": [
                           "\"10\"",
                           "2"
                        ],
                        "args_after": {},
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "error_code": 0
                        },
                        "globals_after": {
                           "error_code": -1
                        },
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           32,
                           33,
                           34,
                           35
                        ],
                        "exception_type": "<class 'TypeError'>",
                        "exception_message": "TypeError: Variable a='10' is not an int!",
                        "constructor": "",
                        "cost": 0.0
                     },
                     "2ab261f2cc5c9bd11e8c9817bea4afdfda42f0608bcff0ddd4521ae6d59cc6e8": {
                        "args_before": [
                           "8",
                           "[]"
                        ],
                        "args_after": {
                           "b": "[]"
                        },
                        "kwargs": {},
                        "kwargs_after": {},
                        "globals_before": {
                           "error_code": 0
                        },
                        "globals_after": {
                           "error_code": -2
                        },
                        "expected_result": "None",
                        "expected_type": "NoneType",
                        "coverage": [
                           32,
                           33,
                           36,
                           37,
                           38
                        ],
                        "exception_type": "<class 'TypeError'>",
                        "exception_message": "TypeError: Variable b=[] is not an int!",
                        "constructor": "",
                        "cost": 0.0
                     }
                  },
                  "coverage_percentage": 100.0,
                  "types_in_use": [
                     "logging.Logger",
                     "logging.Manager",
                     "logging.PlaceHolder",
                     "logging.RootLogger",
                     "logging.StreamHandler"
                  ],
                  "global_vars_read_from": [
                     "error_code",
                     "logger"
                  ],
                  "global_vars_written_to": [
                     "error_code"
                  ],
                  "unified_test_coverage": [
                     32,
                     33,
                     34,
                     35,
                     36,
                     37,
                     38,
                     39,
                     40,
                     41,
                     42
                  ],
                  "needs_pytest": true,
                  "exceptions_raised": [
                     "<class 'TypeError'>",
                     "<class 'ValueError'>"
                  ],
                  "callable_files": {
                     "divide_ints": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\procedural_division\\divide_ints.py"
                  }
               }
            }
         },
         "globals_after": {},
         "expected_result": "252acc6c11e8af0020608482027ff01a094facec4dddd6c5b97a134d630b6692",
         "expected_type": "str",
         "coverage": [
            1903,
            1904,
            1905,
            1906,
            1909,
            1910,
            1911,
            1912,
            1917,
            1923,
            1924,
            1925,
            1935,
            1939,
            1940,
            1942,
            1943,
            1945,
            1946,
            1964,
            1966,
            1967,
            1968,
            1969,
            1970,
            1974,
            1977,
            1979,
            1980,
            1981,
            1982,
            1983,
            1984,
            1990,
            1991,
            1992,
            1993,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2007,
            2008,
            2009,
            2012,
            2015,
            2016,
            2017,
            2018,
            2019,
            2022,
            2025,
            2028,
            2029,
            2030,
            2032,
            2035,
            2036,
            2040,
            2041,
            2042,
            2043,
            2044,
            2046,
            2047,
            2048,
            2058,
            2063,
            2073,
            2074,
            2075,
            2077,
            2080,
            2083,
            2084,
            2085,
            2089,
            2090,
            2091,
            2092,
            2093,
            2103,
            2105,
            2108,
            2109,
            2110,
            2111,
            2121,
            2124,
            2125,
            2126,
            2127,
            2128,
            2130,
            2131,
            2154,
            2156,
            2160,
            2161,
            2168,
            2170,
            2174,
            2176,
            2193,
            2194,
            2200,
            2201,
            2204,
            2206,
            2207,
            2208,
            2211,
            2212,
            2216,
            2219,
            2221,
            2222,
            2223,
            2224,
            2225,
            2226,
            2229,
            2231,
            2232,
            2233,
            2234,
            2237,
            2240,
            2241,
            2245,
            2246,
            2247,
            2248,
            2250,
            2251,
            2252,
            2253,
            2255,
            2263,
            2264,
            2265,
            2266,
            2267,
            2268,
            2269,
            2270,
            2271,
            2273,
            2277,
            2278,
            2289,
            2290,
            2306,
            2307,
            2308
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.95
      }
   },
   "coverage_percentage": 50.62,
   "types_in_use": [
      "_io.TextIOWrapper",
      "collections.OrderedDict",
      "collections.defaultdict",
      "logging.Logger",
      "logging.Manager",
      "logging.PlaceHolder",
      "logging.RootLogger",
      "logging.StreamHandler",
      "pathlib.WindowsPath",
      "pprint.PrettyPrinter",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "global_vars_read_from": [
      "CalledProcessError",
      "all_metadata",
      "logger",
      "pp"
   ],
   "global_vars_written_to": [],
   "unified_test_coverage": [
      1903,
      1904,
      1905,
      1906,
      1909,
      1910,
      1911,
      1912,
      1917,
      1923,
      1924,
      1925,
      1935,
      1939,
      1940,
      1942,
      1943,
      1945,
      1946,
      1964,
      1966,
      1967,
      1968,
      1969,
      1970,
      1974,
      1977,
      1979,
      1980,
      1981,
      1982,
      1983,
      1984,
      1990,
      1991,
      1992,
      1993,
      1995,
      1996,
      1997,
      1998,
      1999,
      2000,
      2001,
      2002,
      2003,
      2004,
      2005,
      2007,
      2008,
      2009,
      2012,
      2015,
      2016,
      2017,
      2018,
      2019,
      2022,
      2025,
      2028,
      2029,
      2030,
      2032,
      2035,
      2036,
      2040,
      2041,
      2042,
      2043,
      2044,
      2046,
      2047,
      2048,
      2058,
      2063,
      2073,
      2074,
      2075,
      2077,
      2080,
      2083,
      2084,
      2085,
      2089,
      2090,
      2091,
      2092,
      2093,
      2103,
      2105,
      2108,
      2109,
      2110,
      2111,
      2121,
      2124,
      2125,
      2126,
      2127,
      2128,
      2130,
      2131,
      2154,
      2156,
      2160,
      2161,
      2168,
      2170,
      2174,
      2176,
      2193,
      2194,
      2200,
      2201,
      2204,
      2206,
      2207,
      2208,
      2211,
      2212,
      2216,
      2219,
      2221,
      2222,
      2223,
      2224,
      2225,
      2226,
      2229,
      2231,
      2232,
      2233,
      2234,
      2237,
      2240,
      2241,
      2245,
      2246,
      2247,
      2248,
      2250,
      2251,
      2252,
      2253,
      2255,
      2263,
      2264,
      2265,
      2266,
      2267,
      2268,
      2269,
      2270,
      2271,
      2273,
      2277,
      2278,
      2289,
      2290,
      2306,
      2307,
      2308
   ],
   "needs_pytest": false,
   "exceptions_raised": [],
   "callable_files": {
      "auto_generate_tests": "C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py"
   }
}