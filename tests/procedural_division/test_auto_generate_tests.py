"""
Programmatically generated test function for auto_generate_tests()
"""
import re
import pytest
from src import unit_test_generator
from _pytest.monkeypatch import MonkeyPatch

# Now import modules specific to auto_generate_tests:
from pprint import PrettyPrinter
from pathlib import WindowsPath
from logging import Logger
from src.unit_test_generator import CoverageInfo
from collections import defaultdict
from src.unit_test_generator import FunctionMetaData
ALL_METADATA = defaultdict(<class 'src.unit_test_generator.FunctionMetaData'>, {'update_global': FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1586, 1587, 1588, 1589, 1590, 1591, 1592, 1594, 1602, 1603, 1604, 1605, 1606], non_code_lines={1600, 1601, 1593, 1595, 1596, 1597, 1598, 1599}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'03a61bab75c52bb0770f60d8549ba350d2b9a21795735ab9fbb017959c6e9eed': CoverageInfo(args_before=['0', '"error_code"', '"Before"', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)"], args_after=OrderedDict([('this_coverage_info', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result="CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1586, 1589, 1594, 1602, 1603, 1606], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.Logger', 'src.unit_test_generator.CoverageInfo'}, unified_test_coverage={1602, 1603, 1606, 1586, 1589, 1594}, needs_pytest=False, callable_files={'update_global': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}), 'update_metadata': FunctionMetaData(name='update_metadata', parameter_names=['f', 'this_metadata'], is_method=False, lines=[1411, 1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1440, 1435, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1449], non_code_lines={1432, 1434, 1422, 1414}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'614c847d178adbf4081dde1bc19b4da41fb55510ccf3ec4e1573e170dc4f1b1d': CoverageInfo(args_before=['<function divide_ints at 0x00000280546704A0>', "FunctionMetaData(name='divide_ints', parameter_names=['a', 'b'], is_method=False, lines=[], non_code_lines=set(), global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/procedural_division/divide_ints.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={})"], args_after=OrderedDict([('this_metadata', "FunctionMetaData(name='divide_ints', parameter_names=['a', 'b'], is_method=False, lines=[32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], non_code_lines=set(), global_vars_read_from={'error_code', 'logger'}, global_vars_written_to={'error_code'}, source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/procedural_division/divide_ints.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False, callable_files={'divide_ints': 'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\tests\\\\procedural_division\\\\divide_ints.py'})")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1443, 1444, 1445, 1446, 1447, 1448], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=74.36, types_in_use={'pathlib.WindowsPath', 'divide_ints', 'src.unit_test_generator.FunctionMetaData', 'logging.Logger'}, unified_test_coverage={1411, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433, 1435, 1436, 1437, 1438, 1439, 1443, 1444, 1445, 1446, 1447, 1448}, needs_pytest=False, callable_files={'update_metadata': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}), 'divide_ints': FunctionMetaData(name='divide_ints', parameter_names=['a', 'b'], is_method=False, lines=[32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], non_code_lines=set(), global_vars_read_from={'error_code', 'logger'}, global_vars_written_to={'error_code'}, source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/procedural_division/divide_ints.py'), coverage_io={'3c3651fe9bf9ccfdd1a1aff6a70f7ed10020457da35226255464b77c65d9b9f1': CoverageInfo(args_before=['6', '2'], args_after=OrderedDict(), kwargs={}, kwargs_after=OrderedDict(), globals_before={'error_code': 0}, globals_after={'error_code': 0}, expected_result='6/2=3.0', expected_type='str', coverage=[32, 33, 36, 39, 42], exception_type='', exception_message='', constructor='', cost=0.0), '8dcd244d9477f2f2ad357ec77e59f72415baec689cd405b8f6194849632f34bc': CoverageInfo(args_before=['3', '0'], args_after=OrderedDict(), kwargs={}, kwargs_after=OrderedDict(), globals_before={'error_code': 0}, globals_after={'error_code': -3}, expected_result='None', expected_type='NoneType', coverage=[32, 33, 36, 39, 40, 41], exception_type="<class 'ValueError'>", exception_message='ValueError: Cannot divide by zero!', constructor='', cost=0.0), '07a742d4d53ae6bf7189b38410c8560979026474279353f659adda1c5bcd46a8': CoverageInfo(args_before=['"10"', '2'], args_after=OrderedDict(), kwargs={}, kwargs_after=OrderedDict(), globals_before={'error_code': 0}, globals_after={'error_code': -1}, expected_result='None', expected_type='NoneType', coverage=[32, 33, 34, 35], exception_type="<class 'TypeError'>", exception_message="TypeError: Variable a='10' is not an int!", constructor='', cost=0.0), '2ab261f2cc5c9bd11e8c9817bea4afdfda42f0608bcff0ddd4521ae6d59cc6e8': CoverageInfo(args_before=['8', '[]'], args_after=OrderedDict([('b', '[]')]), kwargs={}, kwargs_after=OrderedDict(), globals_before={'error_code': 0}, globals_after={'error_code': -2}, expected_result='None', expected_type='NoneType', coverage=[32, 33, 36, 37, 38], exception_type="<class 'TypeError'>", exception_message='TypeError: Variable b=[] is not an int!', constructor='', cost=0.0)}, coverage_percentage=100.0, types_in_use={'logging.Logger'}, unified_test_coverage={32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42}, needs_pytest=True, callable_files={'divide_ints': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\tests\\procedural_division\\divide_ints.py'})})
  # In sum, these tests covered 51.92% of auto_generate_tests's lines
  # Line(s) not covered by ANY of the tests below:
  # ['2048', '2052', '2064-2065', '2069-2072', '2074', '2076', '2082-2088', '2099', '2103', '2105-2106', '2108-2113', '2115', '2117-2118', '2120-2122', '2125', '2127', '2132', '2134', '2136-2137', '2141-2143', '2147-2158', '2168', '2172', '2187', '2197-2198', '2200', '2205-2206', '2208-2209', '2229-2231', '2249-2250', '2252-2257', '1886', '1905-1910', '1912-1913', '1915-1916', '1926-1929', '1931', '1941-1942', '1955-1956', '1958', '1976', '1980-1981', '1983-1984', '1990-1991', '1993-1994', '1996-1997', '2004', '2007-2008', '2015', '2019-2027', '2029-2030', '2032', '2034-2035', '2037-2039', '2041']
@pytest.mark.parametrize(
"function_metadata, state, function_name, source_file, tests_dir, outdir, indent_size, expected_result, args_after, globals_before",
[(FunctionMetaData(name='update_global', parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, lines=[1586, 1587, 1588, 1589, 1590, 1591, 1592, 1594, 1602, 1603, 1604, 1605, 1606], non_code_lines={1600, 1601, 1593, 1595, 1596, 1597, 1598, 1599}, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'03a61bab75c52bb0770f60d8549ba350d2b9a21795735ab9fbb017959c6e9eed': CoverageInfo(args_before=['0', '"error_code"', '"Before"', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)"], args_after=OrderedDict([('this_coverage_info', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result="CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1586, 1589, 1594, 1602, 1603, 1606], exception_type='', exception_message='', constructor='', cost=0.0)}, coverage_percentage=46.15, types_in_use={'logging.Logger', 'src.unit_test_generator.CoverageInfo'}, unified_test_coverage={1602, 1603, 1606, 1586, 1589, 1594}, needs_pytest=False, callable_files={'update_global': 'C:\\Users\\James\\Documents\\CyberResources\\ddt\\src\\unit_test_generator.py'}),{'03a61bab75c52bb0770f60d8549ba350d2b9a21795735ab9fbb017959c6e9eed': CoverageInfo(args_before=['0', '"error_code"', '"Before"', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)"], args_after=OrderedDict([('this_coverage_info', "CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result="CoverageInfo(args_before=['6', '2'], args_after={}, kwargs={}, kwargs_after={}, globals_before={'error_code': 0}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1586, 1589, 1594, 1602, 1603, 1606], exception_type='', exception_message='', constructor='', cost=0.0)},"update_global",WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'),WindowsPath('.'),WindowsPath('.'),'252acc6c11e8af0020608482027ff01a094facec4dddd6c5b97a134d630b6692',{'function_metadata': 'FunctionMetaData(name=\'update_global\', parameter_names=[\'obj\', \'this_global\', \'phase\', \'this_coverage_info\'], is_method=False, lines=[1586, 1587, 1588, 1589, 1590, 1591, 1592, 1594, 1602, 1603, 1604, 1605, 1606], non_code_lines={1600, 1601, 1593, 1595, 1596, 1597, 1598, 1599}, global_vars_read_from={\'logger\'}, global_vars_written_to=set(), source_file=WindowsPath(\'C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py\'), coverage_io={\'03a61bab75c52bb0770f60d8549ba350d2b9a21795735ab9fbb017959c6e9eed\': CoverageInfo(args_before=[\'0\', \'"error_code"\', \'"Before"\', "CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)"], args_after=OrderedDict([(\'this_coverage_info\', "CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\'error_code\': 0}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)")]), kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result="CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\'error_code\': 0}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)", expected_type=\'src.unit_test_generator.CoverageInfo\', coverage=[1586, 1589, 1594, 1602, 1603, 1606], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)}, coverage_percentage=46.15, types_in_use={\'logging.Logger\', \'src.unit_test_generator.CoverageInfo\'}, unified_test_coverage={1602, 1603, 1606, 1586, 1589, 1594}, needs_pytest=False, callable_files={\'update_global\': \'C:\\\\Users\\\\James\\\\Documents\\\\CyberResources\\\\ddt\\\\src\\\\unit_test_generator.py\'})', 'state': '{\'03a61bab75c52bb0770f60d8549ba350d2b9a21795735ab9fbb017959c6e9eed\': CoverageInfo(args_before=[\'0\', \'"error_code"\', \'"Before"\', "CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)"], args_after={\'this_coverage_info\': "CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\'error_code\': 0}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)"}, kwargs={}, kwargs_after=OrderedDict(), globals_before={}, globals_after={}, expected_result="CoverageInfo(args_before=[\'6\', \'2\'], args_after={}, kwargs={}, kwargs_after={}, globals_before={\'error_code\': 0}, globals_after={}, expected_result=\'\', expected_type=\'\', coverage=[], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)", expected_type=\'src.unit_test_generator.CoverageInfo\', coverage=[1586, 1589, 1594, 1602, 1603, 1606], exception_type=\'\', exception_message=\'\', constructor=\'\', cost=0.0)}', 'source_file': "WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py')", 'tests_dir': "WindowsPath('.')", 'outdir': "WindowsPath('.')"},{}),
])
def test_auto_generate_tests(function_metadata, state, function_name, source_file, tests_dir, outdir, indent_size, expected_result, args_after, globals_before):
    """
    Programmatically generated test function for auto_generate_tests()
    """
    monkeypatch = MonkeyPatch()
    monkeypatch.setattr(unit_test_generator, "all_metadata", ALL_METADATA)
    result = unit_test_generator.auto_generate_tests(function_metadata,state,function_name,source_file,tests_dir,outdir,indent_size)
    assert result == expected_result or result == eval(expected_result)
    assert function_metadata == eval(args_after["function_metadata"]) or args_after["function_metadata"] == function_metadata
    assert state == eval(args_after["state"]) or args_after["state"] == state
    assert source_file == eval(args_after["source_file"]) or args_after["source_file"] == source_file
    assert tests_dir == eval(args_after["tests_dir"]) or args_after["tests_dir"] == tests_dir
    assert outdir == eval(args_after["outdir"]) or args_after["outdir"] == outdir
