{
   "name": "meta_program_function_call",
   "parameter_names": [
      "this_state",
      "tab",
      "package",
      "function_metadata"
   ],
   "is_method": false,
   "source_file": null,
   "non_code_lines": [
      1601,
      1603,
      1604,
      1606,
      1609,
      1610,
      1611,
      1614,
      1618,
      1625,
      1626,
      1628,
      1629,
      1635,
      1636,
      1638,
      1648,
      1650,
      1651,
      1652,
      1655,
      1660,
      1670,
      1679,
      1680,
      1684,
      1685,
      1686,
      1687,
      1688,
      1689,
      1692
   ],
   "coverage_io": {
      "21292fda3cd4c3ca5f1c0f27a6f796e1ef8f6ce2a63ff6607ac7509cf7234f2d": {
         "args": [
            "CoverageInfo(args=['all_types.get_item_at_index', \"FunctionMetaData(name='get_item_at_index', lines=[], parameter_names=['iterable', 'index'], is_method=False, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/example_all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False)\"], kwargs={}, globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[276, 277, 315, 317, 318, 319, 322, 323, 1080, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1103, 1104, 1107, 1110, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1153, 1154, 1155], exception_type='', exception_message='', constructor='', cost=0.01)",
            "\"  \"",
            "\"unit_test_generator\"",
            "FunctionMetaData(name='update_metadata', lines=[1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], parameter_names=['f', 'this_metadata'], is_method=False, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'975a2a3a4a98049f16a0603581ef567c032bad79d9e8a3065948172922a55521': CoverageInfo(args=['all_types.get_item_at_index', \"FunctionMetaData(name='get_item_at_index', lines=[], parameter_names=['iterable', 'index'], is_method=False, global_vars_read_from=set(), global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/tests/example_all_types/all_types.py'), coverage_io={}, coverage_percentage=0.0, types_in_use=set(), unified_test_coverage=set(), needs_pytest=False)\"], kwargs={}, globals_before={}, globals_after={}, expected_result='None', expected_type='NoneType', coverage=[276, 277, 315, 317, 318, 319, 322, 323, 1080, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1103, 1104, 1107, 1110, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1153, 1154, 1155], exception_type='', exception_message='', constructor='', cost=0.01)}, coverage_percentage=81.82, types_in_use={'pathlib.WindowsPath', 'src.unit_test_generator.FunctionMetaData', 'logging.Logger', 'all_types'}, unified_test_coverage={1153, 1154, 1155, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149}, needs_pytest=False)"
         ],
         "kwargs": {},
         "globals_before": {},
         "globals_after": {},
         "expected_result": "['    result = unit_test_generator.update_metadata(f,this_metadata)\\n', '    assert result == expected_result or result == eval(expected_result)\\n']",
         "expected_type": "list",
         "coverage": [
            228,
            229,
            230,
            231,
            233,
            236,
            237,
            238,
            241,
            242,
            248,
            249,
            253,
            254,
            258,
            259,
            263,
            265,
            266,
            276,
            277,
            284,
            285,
            286,
            287,
            315,
            317,
            318,
            319,
            322,
            323,
            446,
            447,
            462,
            467,
            472,
            473,
            474,
            476,
            477,
            478,
            480,
            481,
            482,
            486,
            490,
            496,
            497,
            501,
            503,
            504,
            509,
            516,
            524,
            536,
            537,
            701,
            702,
            716,
            722,
            725,
            726,
            727,
            738,
            740,
            743,
            745,
            765,
            766,
            770,
            784,
            835,
            837,
            840,
            841,
            843,
            845,
            854,
            860,
            862,
            865,
            866,
            867,
            868,
            869,
            871,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            914,
            915,
            917,
            918,
            919,
            920,
            921,
            923,
            925,
            931,
            932,
            933,
            935,
            936,
            941,
            942,
            943,
            945,
            954,
            955,
            957,
            958,
            959,
            960,
            966,
            967,
            968,
            989,
            999,
            1001,
            1011,
            1013,
            1014,
            1021,
            1022,
            1029,
            1030,
            1032,
            1033,
            1034,
            1035,
            1036,
            1037,
            1038,
            1039,
            1043,
            1048,
            1049,
            1061,
            1062,
            1067,
            1068,
            1069,
            1071,
            1072,
            1073,
            1080,
            1082,
            1083,
            1084,
            1085,
            1086,
            1088,
            1089,
            1090,
            1091,
            1103,
            1104,
            1107,
            1110,
            1120,
            1122,
            1124,
            1125,
            1126,
            1127,
            1128,
            1129,
            1130,
            1131,
            1132,
            1133,
            1134,
            1137,
            1138,
            1139,
            1141,
            1142,
            1143,
            1144,
            1145,
            1146,
            1147,
            1149,
            1153,
            1154,
            1155,
            1209,
            1211,
            1212,
            1213,
            1214,
            1215,
            1591,
            1592,
            1593,
            1594,
            1595,
            1596,
            1597,
            1598,
            1599,
            1600,
            1602,
            1605,
            1612,
            1613,
            1619,
            1620,
            1630,
            1631,
            1632,
            1637,
            1653,
            1654,
            1657,
            1658,
            1661,
            1662,
            1663,
            1671,
            1672,
            1673,
            1674,
            1675,
            1681,
            1683,
            1690,
            1691,
            1695
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.231
      }
   },
   "coverage_percentage": 50.0,
   "types_in_use": [
      "logging.Logger",
      "pathlib.WindowsPath",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "lines": [
      1591,
      1592,
      1593,
      1594,
      1595,
      1596,
      1597,
      1596,
      1598,
      1599,
      1600,
      1602,
      1605,
      1607,
      1608,
      1612,
      1613,
      1615,
      1616,
      1617,
      1619,
      1620,
      1621,
      1622,
      1623,
      1624,
      1627,
      1630,
      1631,
      1632,
      1633,
      1634,
      1637,
      1639,
      1640,
      1641,
      1642,
      1643,
      1644,
      1645,
      1646,
      1647,
      1649,
      1653,
      1654,
      1656,
      1657,
      1658,
      1659,
      1661,
      1662,
      1663,
      1664,
      1665,
      1666,
      1667,
      1668,
      1669,
      1671,
      1672,
      1673,
      1674,
      1675,
      1676,
      1677,
      1678,
      1681,
      1682,
      1683,
      1690,
      1691,
      1693,
      1694,
      1695
   ],
   "global_vars_read_from": [
      "logger"
   ],
   "global_vars_written_to": [],
   "unified_test_coverage": [
      1591,
      1592,
      1593,
      1594,
      1595,
      1596,
      1597,
      1598,
      1599,
      1600,
      1602,
      1605,
      1612,
      1613,
      1619,
      1620,
      1630,
      1631,
      1632,
      1637,
      1653,
      1654,
      1657,
      1658,
      1661,
      1662,
      1663,
      1671,
      1672,
      1673,
      1674,
      1675,
      1681,
      1683,
      1690,
      1691,
      1695
   ],
   "needs_pytest": false,
   "exceptions_raised": []
}