{
   "name": "meta_program_function_call",
   "parameter_names": [
      "this_state",
      "tab",
      "package",
      "function_metadata"
   ],
   "is_method": false,
   "source_file": null,
   "non_code_lines": [
      1593,
      1595,
      1596,
      1598,
      1601,
      1602,
      1603,
      1606,
      1610,
      1617,
      1618,
      1620,
      1621,
      1627,
      1628,
      1630,
      1640,
      1642,
      1643,
      1644,
      1647,
      1652,
      1662,
      1671,
      1672,
      1676,
      1677,
      1678,
      1679,
      1680,
      1681,
      1684
   ],
   "coverage_io": {
      "468eb96fe9e29f87d985e3fdd4323c785ed3e964c1ab2a0786f44c5226ac7144": {
         "args": [
            "CoverageInfo(args=['\"fizzbuzz\"', '\"mode\"', '\"Before\"', \"CoverageInfo(args=['6'], kwargs={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], kwargs={}, globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args=['6'], kwargs={}, globals_before={'mode': 'fizzbuzz'}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1419, 1422, 1426, 1435, 1436, 1439], exception_type='', exception_message='', constructor='', cost=0.002)",
            "\"  \"",
            "\"unit_test_generator\"",
            "FunctionMetaData(name='update_global', lines=[1419, 1420, 1421, 1422, 1423, 1424, 1426, 1435, 1436, 1437, 1438, 1439], parameter_names=['obj', 'this_global', 'phase', 'this_coverage_info'], is_method=False, global_vars_read_from={'logger'}, global_vars_written_to=set(), source_file=WindowsPath('C:/Users/James/Documents/CyberResources/ddt/src/unit_test_generator.py'), coverage_io={'c4a3e1cd55e579656c0c7185c1d24c62fc6edb40531b00401a93301e4b8d4a01': CoverageInfo(args=['\"fizzbuzz\"', '\"mode\"', '\"Before\"', \"CoverageInfo(args=['6'], kwargs={}, globals_before={}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\"], kwargs={}, globals_before={}, globals_after={}, expected_result=\"CoverageInfo(args=['6'], kwargs={}, globals_before={'mode': 'fizzbuzz'}, globals_after={}, expected_result='', expected_type='', coverage=[], exception_type='', exception_message='', constructor='', cost=0.0)\", expected_type='src.unit_test_generator.CoverageInfo', coverage=[1419, 1422, 1426, 1435, 1436, 1439], exception_type='', exception_message='', constructor='', cost=0.002)}, coverage_percentage=50.0, types_in_use={'logging.Logger', 'src.unit_test_generator.CoverageInfo'}, unified_test_coverage={1419, 1422, 1426, 1435, 1436, 1439}, needs_pytest=False)"
         ],
         "kwargs": {},
         "globals_before": {},
         "globals_after": {},
         "expected_result": "['    result = unit_test_generator.update_global(obj,this_global,phase,this_coverage_info)\\n', '    assert isinstance(result, expected_type)\\n', '    assert result == expected_result or result == eval(expected_result)\\n']",
         "expected_type": "list",
         "coverage": [
            228,
            229,
            230,
            231,
            233,
            236,
            237,
            238,
            241,
            242,
            248,
            249,
            253,
            254,
            258,
            259,
            263,
            265,
            266,
            276,
            277,
            284,
            285,
            286,
            287,
            315,
            317,
            318,
            319,
            322,
            323,
            446,
            447,
            462,
            467,
            472,
            473,
            474,
            476,
            477,
            478,
            480,
            481,
            482,
            486,
            490,
            496,
            497,
            501,
            503,
            504,
            509,
            516,
            524,
            536,
            537,
            701,
            702,
            716,
            722,
            725,
            726,
            727,
            738,
            740,
            743,
            745,
            765,
            766,
            770,
            784,
            835,
            837,
            840,
            841,
            843,
            845,
            854,
            860,
            862,
            865,
            866,
            867,
            868,
            869,
            871,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            914,
            915,
            917,
            918,
            919,
            920,
            921,
            923,
            925,
            931,
            932,
            933,
            935,
            936,
            941,
            942,
            943,
            945,
            954,
            955,
            957,
            958,
            959,
            960,
            966,
            967,
            968,
            989,
            999,
            1001,
            1011,
            1013,
            1014,
            1021,
            1022,
            1029,
            1030,
            1032,
            1033,
            1034,
            1035,
            1036,
            1037,
            1038,
            1039,
            1043,
            1048,
            1049,
            1061,
            1062,
            1067,
            1068,
            1069,
            1071,
            1072,
            1073,
            1080,
            1082,
            1083,
            1084,
            1085,
            1086,
            1088,
            1089,
            1090,
            1091,
            1103,
            1104,
            1107,
            1110,
            1120,
            1122,
            1124,
            1125,
            1126,
            1127,
            1128,
            1130,
            1131,
            1133,
            1134,
            1135,
            1136,
            1137,
            1138,
            1139,
            1141,
            1145,
            1146,
            1147,
            1201,
            1203,
            1204,
            1205,
            1206,
            1207,
            1583,
            1584,
            1585,
            1586,
            1587,
            1588,
            1589,
            1590,
            1591,
            1592,
            1594,
            1597,
            1604,
            1605,
            1611,
            1612,
            1622,
            1623,
            1624,
            1629,
            1645,
            1646,
            1649,
            1650,
            1653,
            1654,
            1655,
            1663,
            1664,
            1665,
            1666,
            1667,
            1673,
            1674,
            1675,
            1682,
            1683,
            1687
         ],
         "exception_type": "",
         "exception_message": "",
         "constructor": "",
         "cost": 0.168
      }
   },
   "coverage_percentage": 51.35,
   "types_in_use": [
      "logging.Logger",
      "pathlib.WindowsPath",
      "src.unit_test_generator.CoverageInfo",
      "src.unit_test_generator.FunctionMetaData"
   ],
   "lines": [
      1583,
      1584,
      1585,
      1586,
      1587,
      1588,
      1589,
      1588,
      1590,
      1591,
      1592,
      1594,
      1597,
      1599,
      1600,
      1604,
      1605,
      1607,
      1608,
      1609,
      1611,
      1612,
      1613,
      1614,
      1615,
      1616,
      1619,
      1622,
      1623,
      1624,
      1625,
      1626,
      1629,
      1631,
      1632,
      1633,
      1634,
      1635,
      1636,
      1637,
      1638,
      1639,
      1641,
      1645,
      1646,
      1648,
      1649,
      1650,
      1651,
      1653,
      1654,
      1655,
      1656,
      1657,
      1658,
      1659,
      1660,
      1661,
      1663,
      1664,
      1665,
      1666,
      1667,
      1668,
      1669,
      1670,
      1673,
      1674,
      1675,
      1682,
      1683,
      1685,
      1686,
      1687
   ],
   "global_vars_read_from": [
      "logger"
   ],
   "global_vars_written_to": [],
   "unified_test_coverage": [
      1583,
      1584,
      1585,
      1586,
      1587,
      1588,
      1589,
      1590,
      1591,
      1592,
      1594,
      1597,
      1604,
      1605,
      1611,
      1612,
      1622,
      1623,
      1624,
      1629,
      1645,
      1646,
      1649,
      1650,
      1653,
      1654,
      1655,
      1663,
      1664,
      1665,
      1666,
      1667,
      1673,
      1674,
      1675,
      1682,
      1683,
      1687
   ],
   "needs_pytest": false,
   "exceptions_raised": []
}